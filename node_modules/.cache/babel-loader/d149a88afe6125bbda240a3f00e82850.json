{"ast":null,"code":"var _jsxFileName = \"/Users/catherinegiese/Documents/GitHub/assignment-2-cathgiese/src/components/timers/Tabata.js\";\nimport React from 'react';\nimport styled from \"styled-components\";\nimport { useState, useEffect, useContext } from \"react\";\nimport Button from \"../generic/Button/Button\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport { TimerContext } from '../../TimerProvider';\nconst Delete = styled.div`\n  display: flex;\n  justify-content: right;`;\nconst Tabata = ({\n  work,\n  rest,\n  rounds,\n  id,\n  status\n}) => {\n  // Store the time and button\n  const {\n    timers,\n    setTimers,\n    isRunning,\n    nextTimer,\n    isReset\n  } = useContext(TimerContext);\n  const [time, setTime] = useState(work);\n  const [roundsCount, setRoundsCount] = useState(rounds);\n  const [workStatus, setWorkStatus] = useState(true);\n  useEffect(() => {\n    let intervalId;\n    if (isRunning && status === \"running\" && time !== 0 && roundsCount > 0) {\n      // setting time from 0 to 1 every 10 millisecond using javascript setInterval method\n      intervalId = setInterval(() => setTime(time - 1), 7);\n    }\n    if (isRunning && status === \"running\" && workStatus && time === 0 && roundsCount > 0) {\n      setTime(rest + 99);\n      setWorkStatus(null);\n      intervalId = setInterval(() => setTime(time - 1), 7);\n    }\n    if (isRunning && status === \"running\" && workStatus === null && time === 0 && roundsCount > 0) {\n      setTime(work + 99);\n      setWorkStatus(true);\n      setRoundsCount(roundsCount - 1);\n      intervalId = setInterval(() => setTime(time - 1), 7);\n    }\n    if (roundsCount === 0) {\n      nextTimer();\n      setTime(work);\n      setRoundsCount(rounds);\n      setWorkStatus(true);\n    } else if (status === \"complete\" || isReset) {\n      setTime(work);\n      setRoundsCount(rounds);\n      setWorkStatus(true);\n    }\n    return () => clearInterval(intervalId);\n  }, [isReset, isRunning, nextTimer, rest, rounds, roundsCount, seconds, status, time, work, workStatus]);\n\n  // Seconds calculation\n  const seconds = Math.floor(time % 6000 / 100);\n  const remove = () => {\n    const newTimersList = timers.filter(timer => timer.id !== id);\n    setTimers(newTimersList);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Panel, {\n    \"background-color\": \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Delete, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    text: \"-\",\n    color: isRunning ? \"hidden\" : \"Default-button Button-danger\",\n    onClick: remove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  })), \"Tabata: \", work / 100, \"s work, \", rest / 100, \"s rest for \", rounds, \" rounds\", /*#__PURE__*/React.createElement(DisplayTime, {\n    minutes: \"0\",\n    seconds: seconds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  })));\n};\nexport default Tabata;","map":{"version":3,"names":["React","styled","useState","useEffect","useContext","Button","DisplayTime","Panel","TimerContext","Delete","div","Tabata","work","rest","rounds","id","status","timers","setTimers","isRunning","nextTimer","isReset","time","setTime","roundsCount","setRoundsCount","workStatus","setWorkStatus","intervalId","setInterval","clearInterval","seconds","Math","floor","remove","newTimersList","filter","timer","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","text","color","onClick","minutes"],"sources":["/Users/catherinegiese/Documents/GitHub/assignment-2-cathgiese/src/components/timers/Tabata.js"],"sourcesContent":["import React from 'react'\nimport styled from \"styled-components\";\nimport { useState, useEffect, useContext } from \"react\";\nimport Button from \"../generic/Button/Button\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport { TimerContext } from '../../TimerProvider';\n\nconst Delete = styled.div`\n  display: flex;\n  justify-content: right;`;\n\nconst Tabata = ({work, rest, rounds, id, status}) => {\n    // Store the time and button\n    const {timers, setTimers, isRunning, nextTimer, isReset} = useContext(TimerContext)\n    const [time, setTime] = useState(work);\n    const [roundsCount, setRoundsCount] = useState(rounds)\n    const [workStatus, setWorkStatus] = useState(true)\n\n    useEffect(() => {\n        let intervalId;\n\n        if (isRunning && status === \"running\" && time !==0 && roundsCount > 0) {\n            // setting time from 0 to 1 every 10 millisecond using javascript setInterval method\n            intervalId = setInterval(() => setTime(time - 1), 7);\n            }\n\n        if (isRunning && status === \"running\" && workStatus && time === 0 && roundsCount > 0) {\n            setTime(rest+99)\n            setWorkStatus(null)\n            intervalId = setInterval(() => setTime(time - 1), 7);\n        }\n\n        if (isRunning && status === \"running\" && workStatus === null && time === 0 && roundsCount > 0) {\n            setTime(work+99 )\n            setWorkStatus(true)\n            setRoundsCount(roundsCount-1) \n            intervalId = setInterval(() => setTime(time - 1), 7);\n        }\n        \n        if(roundsCount === 0){\n            nextTimer()\n            setTime(work)\n            setRoundsCount(rounds)\n            setWorkStatus(true)\n        }\n\n        else if (status === \"complete\" || isReset){\n            setTime(work)\n            setRoundsCount(rounds)\n            setWorkStatus(true)\n        }\n\n        return () => clearInterval(intervalId);\n\n      }, [isReset, isRunning, nextTimer, rest, rounds, roundsCount, seconds, status, time, work, workStatus]);\n \n    // Seconds calculation\n    const seconds = Math.floor((time % 6000) / 100);\n\n    const remove = () => {\n        const newTimersList = timers.filter(timer => timer.id !== id)\n        setTimers(newTimersList)\n    }\n\n    return (\n    <div className=\"grid-container\">\n        <Panel background-color=\"blue\">\n        <Delete>\n            <Button \n                text=\"-\"\n                color={isRunning ? \"hidden\":\"Default-button Button-danger\"}\n                onClick={remove}/>\n        </Delete>\n        Tabata: {work/100}s work, {rest/100}s rest for {rounds} rounds\n        <DisplayTime\n            minutes=\"0\"\n            seconds={seconds}/>\n            </Panel>\n        </div>\n    )\n};\n\nexport default Tabata;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}