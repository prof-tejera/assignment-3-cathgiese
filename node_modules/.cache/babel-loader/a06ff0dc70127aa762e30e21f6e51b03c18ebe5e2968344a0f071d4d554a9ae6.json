{"ast":null,"code":"var _jsxFileName = \"/Users/catherinegiese/Documents/GitHub/assignment-1-cathgiese/src/components/timers/Stopwatch.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Button from \"../generic/Button/Button\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport Selector from \"../generic/Selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stopwatch = () => {\n  _s();\n  // Store the time and button\n  const [isRunning, setIsRunning] = useState(null);\n  const [time, setTime] = useState(0);\n  const [min, setMinutes] = useState(null);\n  const [sec, setSeconds] = useState(null);\n\n  // Credit for setInterval & math.floor:\n  https:\n  //medium.com/how-to-react/simple-way-to-create-a-stopwatch-in-react-js-bcc0e08e041e\n  useEffect(() => {\n    let intervalId;\n    if (isRunning && time !== min + sec) {\n      // setting time from 0 to 1 every 10 milisecond using javascript setInterval method\n      intervalId = setInterval(() => setTime(time + 1), 10);\n    }\n    return () => clearInterval(intervalId);\n  }, [isRunning, time]);\n\n  // Minutes calculation\n  const minutes = Math.floor(time % 360000 / 6000);\n\n  // Seconds calculation\n  const seconds = Math.floor(time % 6000 / 100);\n\n  // Milliseconds calculation\n  const milliseconds = time % 100;\n\n  // Start and stop timer\n  const startStop = () => {\n    if (isRunning) {\n      setIsRunning(null);\n    } else {\n      setIsRunning(true);\n    }\n  };\n  console.log(isRunning, time);\n  const reset = () => {\n    setIsRunning(null);\n    setTime(0);\n  };\n\n  // Show 59 numbers for minutes and seconds\n  const numbersList = [...Array(60).keys()];\n  const numbers = numbersList.map(number => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: number,\n    children: number\n  }, number, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Selector, {\n      label: \"min\",\n      onChange: e => setMinutes(e.target.value * 6000),\n      numbers: numbers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Selector, {\n      label: \"sec\",\n      onChange: e => setSeconds(e.target.value * 100),\n      numbers: numbers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DisplayTime, {\n      minutes: minutes,\n      seconds: seconds,\n      milliseconds: milliseconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(Panel, {\n        \"background-color\": \"blue\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: isRunning ? \"Pause\" : \"Start\",\n          onClick: startStop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Reset\",\n          onClick: reset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Stopwatch, \"FuYc9YoThNgklSELyfOTOFgwK94=\");\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["useState","useEffect","Button","DisplayTime","Panel","Selector","jsxDEV","_jsxDEV","Stopwatch","_s","isRunning","setIsRunning","time","setTime","min","setMinutes","sec","setSeconds","https","intervalId","setInterval","clearInterval","minutes","Math","floor","seconds","milliseconds","startStop","console","log","reset","numbersList","Array","keys","numbers","map","number","value","children","fileName","_jsxFileName","lineNumber","columnNumber","label","onChange","e","target","className","text","onClick","_c","$RefreshReg$"],"sources":["/Users/catherinegiese/Documents/GitHub/assignment-1-cathgiese/src/components/timers/Stopwatch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Button from \"../generic/Button/Button\";\nimport DisplayTime from \"../generic/DisplayTime/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport Selector from \"../generic/Selector\";\n\nconst Stopwatch = () => {\n    // Store the time and button\n    const [isRunning, setIsRunning] = useState(null);\n    const [time, setTime] = useState(0);\n    const [min, setMinutes] = useState(null);\n    const [sec, setSeconds] = useState(null);\n\n    // Credit for setInterval & math.floor:\n    https://medium.com/how-to-react/simple-way-to-create-a-stopwatch-in-react-js-bcc0e08e041e\n    useEffect(() => {\n        let intervalId;\n        if (isRunning && time !== min + sec) {\n          // setting time from 0 to 1 every 10 milisecond using javascript setInterval method\n          intervalId = setInterval(() => setTime(time + 1), 10);\n        }\n        return () => clearInterval(intervalId);\n        \n      }, [isRunning, time]);\n\n    // Minutes calculation\n    const minutes = Math.floor((time % 360000) / 6000);\n\n    // Seconds calculation\n    const seconds = Math.floor((time % 6000) / 100);\n\n    // Milliseconds calculation\n    const milliseconds = time % 100;\n\n    // Start and stop timer\n    const startStop = () => {\n        if (isRunning) {\n            setIsRunning(null)\n        } else {\n            setIsRunning(true)\n        }\n    }\n    console.log(isRunning, time)\n\n    const reset = () => {\n        setIsRunning(null);\n        setTime(0)\n    }\n\n    // Show 59 numbers for minutes and seconds\n    const numbersList = [...Array(60).keys()]\n    const numbers = numbersList.map(number =>\n        <option value={number} key={number}>{number}</option>)\n    \n    return (\n    <div>\n        <Selector \n            label=\"min\"\n            onChange={e => setMinutes(e.target.value*6000)}\n            numbers={numbers}/>\n        <Selector \n            label=\"sec\"\n            onChange={e => setSeconds(e.target.value*100)}\n            numbers={numbers}/>\n        <DisplayTime\n            minutes={minutes}\n            seconds={seconds}\n            milliseconds={milliseconds}/>\n        <div className=\"grid-container\">\n            <Panel background-color=\"blue\">\n                <Button \n                    text={isRunning ? \"Pause\" : \"Start\"}\n                    onClick={startStop}/>\n                <Button \n                    text=\"Reset\"\n                    onClick={reset}/>\n            </Panel>\n        </div>\n    </div>\n    )\n};\n\nexport default Stopwatch;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,WAAW,MAAM,oCAAoC;AAC5D,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,QAAQ,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACc,GAAG,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACgB,GAAG,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAkB,KAAK;EAAC;EACNjB,SAAS,CAAC,MAAM;IACZ,IAAIkB,UAAU;IACd,IAAIT,SAAS,IAAIE,IAAI,KAAKE,GAAG,GAAGE,GAAG,EAAE;MACnC;MACAG,UAAU,GAAGC,WAAW,CAAC,MAAMP,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;IACvD;IACA,OAAO,MAAMS,aAAa,CAACF,UAAU,CAAC;EAExC,CAAC,EAAE,CAACT,SAAS,EAAEE,IAAI,CAAC,CAAC;;EAEvB;EACA,MAAMU,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEZ,IAAI,GAAG,MAAM,GAAI,IAAI,CAAC;;EAElD;EACA,MAAMa,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEZ,IAAI,GAAG,IAAI,GAAI,GAAG,CAAC;;EAE/C;EACA,MAAMc,YAAY,GAAGd,IAAI,GAAG,GAAG;;EAE/B;EACA,MAAMe,SAAS,GAAGA,CAAA,KAAM;IACpB,IAAIjB,SAAS,EAAE;MACXC,YAAY,CAAC,IAAI,CAAC;IACtB,CAAC,MAAM;MACHA,YAAY,CAAC,IAAI,CAAC;IACtB;EACJ,CAAC;EACDiB,OAAO,CAACC,GAAG,CAACnB,SAAS,EAAEE,IAAI,CAAC;EAE5B,MAAMkB,KAAK,GAAGA,CAAA,KAAM;IAChBnB,YAAY,CAAC,IAAI,CAAC;IAClBE,OAAO,CAAC,CAAC,CAAC;EACd,CAAC;;EAED;EACA,MAAMkB,WAAW,GAAG,CAAC,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACzC,MAAMC,OAAO,GAAGH,WAAW,CAACI,GAAG,CAACC,MAAM,iBAClC7B,OAAA;IAAQ8B,KAAK,EAAED,MAAO;IAAAE,QAAA,EAAeF;EAAM,GAAfA,MAAM;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAkB,CAAC,CAAC;EAE1D,oBACAnC,OAAA;IAAA+B,QAAA,gBACI/B,OAAA,CAACF,QAAQ;MACLsC,KAAK,EAAC,KAAK;MACXC,QAAQ,EAAEC,CAAC,IAAI9B,UAAU,CAAC8B,CAAC,CAACC,MAAM,CAACT,KAAK,GAAC,IAAI,CAAE;MAC/CH,OAAO,EAAEA;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACvBnC,OAAA,CAACF,QAAQ;MACLsC,KAAK,EAAC,KAAK;MACXC,QAAQ,EAAEC,CAAC,IAAI5B,UAAU,CAAC4B,CAAC,CAACC,MAAM,CAACT,KAAK,GAAC,GAAG,CAAE;MAC9CH,OAAO,EAAEA;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACvBnC,OAAA,CAACJ,WAAW;MACRmB,OAAO,EAAEA,OAAQ;MACjBG,OAAO,EAAEA,OAAQ;MACjBC,YAAY,EAAEA;IAAa;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACjCnC,OAAA;MAAKwC,SAAS,EAAC,gBAAgB;MAAAT,QAAA,eAC3B/B,OAAA,CAACH,KAAK;QAAC,oBAAiB,MAAM;QAAAkC,QAAA,gBAC1B/B,OAAA,CAACL,MAAM;UACH8C,IAAI,EAAEtC,SAAS,GAAG,OAAO,GAAG,OAAQ;UACpCuC,OAAO,EAAEtB;QAAU;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACzBnC,OAAA,CAACL,MAAM;UACH8C,IAAI,EAAC,OAAO;UACZC,OAAO,EAAEnB;QAAM;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACjC,EAAA,CA1EID,SAAS;AAAA0C,EAAA,GAAT1C,SAAS;AA4Ef,eAAeA,SAAS;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}