{"ast":null,"code":"var _jsxFileName = \"/Users/catherinegiese/Documents/GitHub/assignment-3-cathgiese/src/TimerProvider.js\";\nimport React from \"react\";\nimport { useState } from \"react\";\nexport const TimerContext = React.createContext({});\nconst TimerProvider = ({\n  children\n}) => {\n  const [timers, setTimers] = useState([]);\n\n  // const [timers, setTimers] = useState([],() => {\n  //     const hash = (window.location.hash ?? '').slice(1);\n  //     return decodeURIComponent(JSON.parse(hash))\n  // });\n  const [isRunning, setIsRunning] = useState(null);\n  const [totalTime, setTotalTime] = useState(0);\n  const [isReset, setIsReset] = useState(null);\n  const [isEditing, setIsEditing] = useState(null);\n\n  // Current running timer\n  const [activeTimerIndex, setActiveTimerIndex] = useState(0);\n  const totalTimeCalc = () => {\n    let globalCount = 0;\n    for (let i = 0; i < timers.length; i++) {\n      if (timers[i].type === \"XY\") {\n        const totalMin = timers[i].minutes * parseInt(timers[i].rounds);\n        const totalSec = timers[i].seconds * parseInt(timers[i].rounds);\n        globalCount += totalMin + totalSec;\n      } else if (timers[i].type === \"Tabata\") {\n        globalCount += timers[i].seconds;\n      } else {\n        globalCount += timers[i].minutes + timers[i].seconds;\n      }\n    }\n    setTotalTime(globalCount);\n  };\n  const nextTimer = () => {\n    if (activeTimerIndex === timers.length - 1) {\n      timers[activeTimerIndex].status = \"complete\";\n      setTimers(timers);\n      restart();\n    } else {\n      timers[activeTimerIndex].status = \"complete\";\n      timers[activeTimerIndex + 1].status = \"running\";\n      setActiveTimerIndex(activeTimerIndex + 1);\n      setTimers(timers);\n    }\n  };\n\n  // Restart timer\n  const restart = () => {\n    setIsReset(true);\n    setIsRunning(null);\n    setActiveTimerIndex(0);\n    timers.map(timer => timer.status = \"ready\");\n    timers[0].status = \"running\";\n    setTimers(timers);\n    setTotalTime(0);\n  };\n\n  // Start or stop timer\n  const startStop = () => {\n    if (isRunning) {\n      setIsRunning(null);\n    } else if (totalTime === 0) {\n      totalTimeCalc();\n      setIsRunning(true);\n      setIsReset(null);\n    } else {\n      setIsRunning(true);\n      setIsReset(null);\n    }\n  };\n\n  // Edit timer\n  const edit = ({\n    id\n  }) => {\n    setIsEditing(id);\n  };\n\n  // Delete from queue\n  const remove = ({\n    id\n  }) => {\n    if (timers.length === 1) {\n      setTimers([]);\n    } else {\n      const match = timers.map(timer => timer.id === id);\n      const i = match.indexOf(true);\n      if (i === 0) {\n        // Update timer list\n        const newTimers = timers.slice(1);\n        newTimers[0].status = \"running\";\n        setTimers(newTimers);\n\n        // recalculate total time\n        const minusMin = timers.map(timer => timer.minutes);\n        minusMin.forEach(val => setTotalTime(totalTime - val));\n        const minusSec = timers.map(timer => timer.seconds);\n        minusSec.forEach(val => setTotalTime(totalTime - val));\n      } else {\n        // Update timer list\n        setTimers([...timers.slice(0, i), ...timers.slice(i + 1)]);\n\n        // recalculate total time\n        const minusMin = timers.map(timer => timer.minutes);\n        minusMin.forEach(val => setTotalTime(totalTime - val));\n        const minusSec = timers.map(timer => timer.seconds);\n        minusSec.forEach(val => setTotalTime(totalTime - val));\n      }\n    }\n    setActiveTimerIndex(0);\n  };\n  return /*#__PURE__*/React.createElement(TimerContext.Provider, {\n    value: {\n      timers,\n      setTimers,\n      isRunning,\n      setIsRunning,\n      totalTime,\n      setTotalTime,\n      totalTimeCalc,\n      activeTimerIndex,\n      setActiveTimerIndex,\n      nextTimer,\n      restart,\n      startStop,\n      isReset,\n      setIsReset,\n      remove,\n      edit,\n      isEditing,\n      setIsEditing\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, children);\n};\nexport default TimerProvider;","map":{"version":3,"names":["React","useState","TimerContext","createContext","TimerProvider","children","timers","setTimers","isRunning","setIsRunning","totalTime","setTotalTime","isReset","setIsReset","isEditing","setIsEditing","activeTimerIndex","setActiveTimerIndex","totalTimeCalc","globalCount","i","length","type","totalMin","minutes","parseInt","rounds","totalSec","seconds","nextTimer","status","restart","map","timer","startStop","edit","id","remove","match","indexOf","newTimers","slice","minusMin","forEach","val","minusSec","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/catherinegiese/Documents/GitHub/assignment-3-cathgiese/src/TimerProvider.js"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n\nexport const TimerContext = React.createContext({});\n\nconst TimerProvider = ({ children }) => {\n    const [timers, setTimers] = useState([]);\n\n    // const [timers, setTimers] = useState([],() => {\n    //     const hash = (window.location.hash ?? '').slice(1);\n    //     return decodeURIComponent(JSON.parse(hash))\n    // });\n    const [isRunning, setIsRunning] = useState(null);\n    const [totalTime, setTotalTime] = useState(0);\n    const [isReset, setIsReset] = useState(null);\n    const [isEditing, setIsEditing] = useState(null);\n\n    // Current running timer\n    const [activeTimerIndex, setActiveTimerIndex] = useState(0); \n    \n    const totalTimeCalc = () => {\n        let globalCount = 0\n        for (let i = 0; i < timers.length; i++) {\n            if (timers[i].type === \"XY\") {\n                const totalMin = (timers[i].minutes * parseInt(timers[i].rounds))\n                const totalSec = (timers[i].seconds * parseInt(timers[i].rounds))\n                globalCount += (totalMin + totalSec)\n            }\n\n            else if (timers[i].type === \"Tabata\") {\n                globalCount += timers[i].seconds\n            }\n\n            else {\n                globalCount += (timers[i].minutes + timers[i].seconds)\n            }\n        }\n        setTotalTime(globalCount)\n    }\n    \n    \n    const nextTimer = () => {\n        if (activeTimerIndex === timers.length-1) {\n            timers[activeTimerIndex].status = \"complete\"\n            setTimers(timers)\n            restart()\n        }\n        else {\n            timers[activeTimerIndex].status = \"complete\"\n            timers[activeTimerIndex+1].status = \"running\"\n            setActiveTimerIndex(activeTimerIndex+1)\n            setTimers(timers)\n        }\n    }\n\n    // Restart timer\n    const restart = () => {\n        setIsReset(true)\n        setIsRunning(null)\n        setActiveTimerIndex(0)\n        timers.map((timer) => timer.status = \"ready\")\n        timers[0].status = \"running\"\n        setTimers(timers)\n        setTotalTime(0)\n    }\n\n    // Start or stop timer\n    const startStop = () => {\n        if (isRunning) {\n            setIsRunning(null)\n        } \n        else if (totalTime === 0){\n            totalTimeCalc()\n            setIsRunning(true)\n            setIsReset(null)\n        }\n        else {\n            setIsRunning(true)\n            setIsReset(null)\n        }\n    }\n\n    // Edit timer\n    const edit = ({id}) => {\n        setIsEditing(id)\n    }\n\n    // Delete from queue\n    const remove = ({id}) => {\n\n        if (timers.length === 1) {\n            setTimers([])\n        }\n\n        else {\n            const match = timers.map((timer) => timer.id === id)\n            const i = match.indexOf(true)\n\n            if (i === 0) {\n                // Update timer list\n                const newTimers = timers.slice(1)\n                newTimers[0].status = \"running\"\n                setTimers(newTimers)\n\n                // recalculate total time\n                const minusMin = timers.map((timer) => timer.minutes)\n                minusMin.forEach((val) => setTotalTime(totalTime-val))\n\n                const minusSec = timers.map((timer) => timer.seconds)\n                minusSec.forEach((val) => setTotalTime(totalTime-val))\n            }\n    \n            else {\n                // Update timer list\n                setTimers([\n                 ...timers.slice(0, i),\n                 ...timers.slice(i + 1),\n               ])\n\n               // recalculate total time\n               const minusMin = timers.map((timer) => timer.minutes)\n               minusMin.forEach((val) => setTotalTime(totalTime-val))\n\n               const minusSec = timers.map((timer) => timer.seconds)\n               minusSec.forEach((val) => setTotalTime(totalTime-val))\n            }\n        }\n\n        setActiveTimerIndex(0)\n    }\n\n    return (\n        <TimerContext.Provider\n            value={{\n                timers,\n                setTimers,\n                isRunning,\n                setIsRunning,\n                totalTime,\n                setTotalTime,\n                totalTimeCalc,\n                activeTimerIndex,\n                setActiveTimerIndex,\n                nextTimer,\n                restart,\n                startStop,\n                isReset,\n                setIsReset,\n                remove,\n                edit,\n                isEditing,\n                setIsEditing,\n            }}\n        >{children}</TimerContext.Provider>\n    )\n};\n\nexport default TimerProvider"],"mappings":"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"},"metadata":{},"sourceType":"module"}